body {
  background: #262626;
  font-family: system-ui;
  margin: 1em; }

.honeycomb {
  --amount: 1;
  list-style-type: none;
  display: grid;
  grid-template-columns: repeat(5, 1fr 2fr) 1fr;
  gap: 0.5rem 1rem;
  margin: 0 auto; }

@keyframes gap {
  to {
    gap: 1rem 2rem; } }
  .honeycomb .hex {
    position: relative;
    grid-column: 1 / span 3;
    grid-row: calc(var(--counter) + var(--counter))/span 2;
    filter: drop-shadow(0 0 10px #262626);
    padding-bottom: 90%;
    transition: all 5ms ease; }
    .honeycomb .hex:nth-child(odd) {
      transform: rotate(180deg); }
      .honeycomb .hex:nth-child(odd) span {
        transform: rotate(180deg); }
    .honeycomb .hex:hover {
      transform: rotate(0) scale(1.05); }
      .honeycomb .hex:hover:nth-child(odd) {
        transform: rotate(180deg) scale(1.05); }
    .honeycomb .hex:nth-child(-n + 44) > * {
      background-color: #ffa3e8; }
    .honeycomb .hex:nth-child(-n + 40) > * {
      background-color: #65ffd1; }
    .honeycomb .hex:nth-child(-n + 36) > * {
      background-color: #ff5757; }
    .honeycomb .hex:nth-child(-n + 32) > * {
      background-color: #bbff00; }
    .honeycomb .hex:nth-child(-n + 28) > * {
      background-color: #ffd19c; }
    .honeycomb .hex:nth-child(-n + 24) > * {
      background-color: #9757ff; }
    .honeycomb .hex:nth-child(-n + 20) > * {
      background-color: white; }
    .honeycomb .hex:nth-child(-n + 16) > * {
      background-color: #008cff; }
    .honeycomb .hex:nth-child(-n + 12) > * {
      background-color: #ffe600; }
    .honeycomb .hex:nth-child(-n + 8) > * {
      background-color: #00ff0d; }
    .honeycomb .hex:nth-child(-n + 4) > * {
      background-color: #ff8800; }
  .honeycomb .hex-content {
    position: absolute;
    height: 100%;
    width: 100%;
    color: #262626;
    clip-path: polygon(75% 0, 100% 50%, 75% 100%, 25% 100%, 0 50%, 25% 0);
    display: flex;
    justify-content: center;
    align-items: end;
    background-color: yellow;
    background-image: url("/images/bee.png");
    background-repeat: no-repeat;
    background-position: center;
    background-size: 50%; }

@keyframes buzz {}    .honeycomb .hex-content span {
      display: none;
      margin-bottom: 0.5em;
      font-size: 2.5rem; }

@media (min-width: 1000px) {
  .honeycomb {
    animation: gap 5s linear infinite alternate; }
    .honeycomb .hex-content {
      background-size: 30%; }
      .honeycomb .hex-content span {
        display: block; } }

@media (min-width: 1300px) {
  .honeycomb .hex-content {
    animation: buzz 1s linear infinite; }
    .honeycomb .hex-content span {
      font-size: 3.5rem;
      margin-bottom: 0; } }

@media (min-width: 1300px) {
  .honeycomb .hex-content {
    background-size: 40%; }
    .honeycomb .hex-content span {
      font-size: 4rem; } }

@media (min-width: 200px) and (max-width: 360px) {
  .honeycomb {
    --amount: 2;
    --counter: 1; }
  .hex:nth-of-type(2n + 1) {
    grid-column: 1 / span 3; }
  .hex:nth-of-type(2n + 2) {
    grid-column: 3 / span 3;
    grid-row: calc(var(--counter) + var(--counter) - 1)/span 2; }
  .hex:nth-of-type(n + 3) {
    --counter: 2; }
  .hex:nth-of-type(n + 5) {
    --counter: 3; }
  .hex:nth-of-type(n + 7) {
    --counter: 4; }
  .hex:nth-of-type(n + 9) {
    --counter: 5; }
  .hex:nth-of-type(n + 11) {
    --counter: 6; }
  .hex:nth-of-type(n + 13) {
    --counter: 7; }
  .hex:nth-of-type(n + 15) {
    --counter: 8; }
  .hex:nth-of-type(n + 17) {
    --counter: 9; }
  .hex:nth-of-type(n + 19) {
    --counter: 10; }
  .hex:nth-of-type(n + 21) {
    --counter: 11; }
  .hex:nth-of-type(n + 23) {
    --counter: 12; }
  .hex:nth-of-type(n + 25) {
    --counter: 13; }
  .hex:nth-of-type(n + 27) {
    --counter: 14; }
  .hex:nth-of-type(n + 29) {
    --counter: 15; }
  .hex:nth-of-type(n + 31) {
    --counter: 16; }
  .hex:nth-of-type(n + 33) {
    --counter: 17; }
  .hex:nth-of-type(n + 35) {
    --counter: 18; }
  .hex:nth-of-type(n + 37) {
    --counter: 19; }
  .hex:nth-of-type(n + 39) {
    --counter: 20; }
  .hex:nth-of-type(n + 41) {
    --counter: 21; } }

@media (min-width: 361px) and (max-width: 450px) {
  .honeycomb {
    --amount: 3;
    --counter: 1; }
  .hex:nth-of-type(3n + 1) {
    grid-column: 1 / span 3; }
  .hex:nth-of-type(3n + 2) {
    grid-column: 3 / span 3;
    grid-row: calc(var(--counter) + var(--counter) - 1)/span 2; }
  .hex:nth-of-type(3n + 3) {
    grid-column: 5 / span 3; }
  .hex:nth-of-type(n + 4) {
    --counter: 2; }
  .hex:nth-of-type(n + 7) {
    --counter: 3; }
  .hex:nth-of-type(n + 10) {
    --counter: 4; }
  .hex:nth-of-type(n + 13) {
    --counter: 5; }
  .hex:nth-of-type(n + 16) {
    --counter: 6; }
  .hex:nth-of-type(n + 19) {
    --counter: 7; }
  .hex:nth-of-type(n + 22) {
    --counter: 8; }
  .hex:nth-of-type(n + 25) {
    --counter: 9; }
  .hex:nth-of-type(n + 28) {
    --counter: 10; }
  .hex:nth-of-type(n + 31) {
    --counter: 11; }
  .hex:nth-of-type(n + 34) {
    --counter: 12; }
  .hex:nth-of-type(n + 37) {
    --counter: 13; }
  .hex:nth-of-type(n + 40) {
    --counter: 14; }
  .hex:nth-of-type(n + 43) {
    --counter: 15; }
  .hex:nth-of-type(n + 46) {
    --counter: 16; }
  .hex:nth-of-type(n + 49) {
    --counter: 17; }
  .hex:nth-of-type(n + 52) {
    --counter: 18; }
  .hex:nth-of-type(n + 55) {
    --counter: 19; }
  .hex:nth-of-type(n + 58) {
    --counter: 20; }
  .hex:nth-of-type(n + 61) {
    --counter: 21; } }

@media (min-width: 451px) and (max-width: 1439px) {
  .honeycomb {
    --amount: 4;
    --counter: 1; }
  .hex:nth-of-type(4n + 1) {
    grid-column: 1 / span 3; }
  .hex:nth-of-type(4n + 2) {
    grid-column: 3 / span 3;
    grid-row: calc(var(--counter) + var(--counter) - 1)/span 2; }
  .hex:nth-of-type(4n + 3) {
    grid-column: 5 / span 3; }
  .hex:nth-of-type(4n + 4) {
    grid-column: 7 / span 3;
    grid-row: calc(var(--counter) + var(--counter) - 1)/span 2; }
  .hex:nth-of-type(n + 5) {
    --counter: 2; }
  .hex:nth-of-type(n + 9) {
    --counter: 3; }
  .hex:nth-of-type(n + 13) {
    --counter: 4; }
  .hex:nth-of-type(n + 17) {
    --counter: 5; }
  .hex:nth-of-type(n + 21) {
    --counter: 6; }
  .hex:nth-of-type(n + 25) {
    --counter: 7; }
  .hex:nth-of-type(n + 29) {
    --counter: 8; }
  .hex:nth-of-type(n + 33) {
    --counter: 9; }
  .hex:nth-of-type(n + 37) {
    --counter: 10; }
  .hex:nth-of-type(n + 41) {
    --counter: 11; }
  .hex:nth-of-type(n + 45) {
    --counter: 12; }
  .hex:nth-of-type(n + 49) {
    --counter: 13; }
  .hex:nth-of-type(n + 53) {
    --counter: 14; }
  .hex:nth-of-type(n + 57) {
    --counter: 15; }
  .hex:nth-of-type(n + 61) {
    --counter: 16; }
  .hex:nth-of-type(n + 65) {
    --counter: 17; }
  .hex:nth-of-type(n + 69) {
    --counter: 18; }
  .hex:nth-of-type(n + 73) {
    --counter: 19; }
  .hex:nth-of-type(n + 77) {
    --counter: 20; }
  .hex:nth-of-type(n + 81) {
    --counter: 21; } }

@media (min-width: 1440px) {
  .honeycomb {
    --amount: 5;
    --counter: 1; }
  .hex:nth-of-type(5n + 1) {
    grid-column: 1 / span 3; }
  .hex:nth-of-type(5n + 2) {
    grid-column: 3 / span 3;
    grid-row: calc(var(--counter) + var(--counter) - 1)/span 2; }
  .hex:nth-of-type(5n + 3) {
    grid-column: 5 / span 3; }
  .hex:nth-of-type(5n + 4) {
    grid-column: 7 / span 3;
    grid-row: calc(var(--counter) + var(--counter) - 1)/span 2; }
  .hex:nth-of-type(5n + 5) {
    grid-column: 9 / span 3; }
  .hex:nth-of-type(n + 6) {
    --counter: 2; }
  .hex:nth-of-type(n + 11) {
    --counter: 3; }
  .hex:nth-of-type(n + 16) {
    --counter: 4; }
  .hex:nth-of-type(n + 21) {
    --counter: 5; }
  .hex:nth-of-type(n + 26) {
    --counter: 6; }
  .hex:nth-of-type(n + 31) {
    --counter: 7; }
  .hex:nth-of-type(n + 36) {
    --counter: 8; }
  .hex:nth-of-type(n + 41) {
    --counter: 9; }
  .hex:nth-of-type(n + 46) {
    --counter: 10; }
  .hex:nth-of-type(n + 51) {
    --counter: 11; }
  .hex:nth-of-type(n + 56) {
    --counter: 12; }
  .hex:nth-of-type(n + 61) {
    --counter: 13; }
  .hex:nth-of-type(n + 66) {
    --counter: 14; }
  .hex:nth-of-type(n + 71) {
    --counter: 15; }
  .hex:nth-of-type(n + 76) {
    --counter: 16; }
  .hex:nth-of-type(n + 81) {
    --counter: 17; }
  .hex:nth-of-type(n + 86) {
    --counter: 18; }
  .hex:nth-of-type(n + 91) {
    --counter: 19; }
  .hex:nth-of-type(n + 96) {
    --counter: 20; }
  .hex:nth-of-type(n + 101) {
    --counter: 21; } }
